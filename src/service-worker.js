/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) =>
    url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.
const staticCache = 'static-cache-v4';
const dynamicCache = 'dynamic-cache-v3';

const fileToCache = [
  '/form-icons/capsule.svg',
  '/form-icons/default.svg',
  '/form-icons/drop.svg',
  '/form-icons/infusion.svg',
  '/form-icons/injection.svg',
  '/form-icons/ointment.svg',
  '/form-icons/solution.svg',
  '/form-icons/suppository.svg',
  '/form-icons/suspension.svg',
  '/form-icons/syrup.svg',
  '/form-icons/tablet.svg',
];

self.addEventListener('install', function (event) {
  event.waitUntil(
    caches.open(staticCache).then((cache) => {
      console.log('Cached install event', cache);
      return cache.addAll(fileToCache);
    })
  );
});

// const staticCache = 'static-cache-v3';
// const dynamicCache = 'dynamic-cache-v3';

// const fileToCache = [
//   '/static/js/bundle.js',
//   '/static/js/main.chunk.js',
//   '/static/js/vendors~main.chunk.js',
//   '/index.html',
//   '/',
//   '/form-icons/capsule.svg',
//   '/form-icons/default.svg',
//   '/form-icons/drop.svg',
//   '/form-icons/infusion.svg',
//   '/form-icons/injection.svg',
//   '/form-icons/ointment.svg',
//   '/form-icons/solution.svg',
//   '/form-icons/suppository.svg',
//   '/form-icons/suspension.svg',
//   '/form-icons/syrup.svg',
//   '/form-icons/tablet.svg',
//   'https://fonts.gstatic.com/s/titilliumweb/v9/NaPecZTIAOhVxoMyOr9n_E7fdMPmDQ.woff2',
// ];

// self.addEventListener('install', function (event) {
//   event.waitUntil(
//     caches.open(staticCache).then((cache) => {
//       return cache.addAll(fileToCache);
//     })
//   );
// });

// self.addEventListener('activate', (evt) => {
//   evt.waitUntil(
//     caches.keys().then((keys) => {
//       return Promise.all(
//         keys
//           .filter((key) => key !== staticCache && key !== dynamicCache)
//           .map((key) => caches.delete(key))
//       );
//     })
//   );
// });

// self.addEventListener('fetch', (evt) => {
//   if (evt.request.url.indexOf('firestore.googleapis.com') === -1) {
//     if (!(evt.request.url.indexOf('http') === 0)) return;
//     evt.respondWith(
//       caches.match(evt.request).then((cacheRes) => {
//         return (
//           cacheRes ||
//           fetch(evt.request).then((fetchRes) => {
//             return caches.open(dynamicCache).then((cache) => {
//               cache.put(evt.request.url, fetchRes.clone());
//               // check cached items size
//               limitCacheSize(dynamicCache, 15);
//               return fetchRes;
//             });
//           })
//         );
//       })
//     );
//   }
// });

// // cache size limit function
// const limitCacheSize = (name, size) => {
//   caches.open(name).then((cache) => {
//     cache.keys().then((keys) => {
//       if (keys.length > size) {
//         cache.delete(keys[0]).then(limitCacheSize(name, size));
//       }
//     });
//   });
// };
